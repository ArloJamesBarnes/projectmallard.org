<page xmlns="http://projectmallard.org/1.0/"
      xmlns:if="http://projectmallard.org/if/1.0/"
      type="topic"
      id="if_attr_test">

<info>
  <revision docversion="1.0" date="2012-02-09" status="review"/>

  <link type="guide" xref="index" group="test"/>

  <credit type="author">
    <name>Shaun McCance</name>
    <email>shaunm@gnome.org</email>
    <years>2011, 2012</years>
  </credit>

  <include href="../../cc-by-sa-3-0.xml" xmlns="http://www.w3.org/2001/XInclude" />
</info>

<title>The <code>test</code> and <code>if:test</code> Attributes</title>

<p>The <code>test</code> attribute contains a <em>test expression</em> that
determines whether or not an element or group of elements is shown. On the
dedicated conditional elements <code xref="if_if">if:if</code> and
<code xref="if_when">if:when</code>, use the <code>test</code> attribute
with no namespace. Otherwise, use the namespaced <code>if:test</code>
attribute.</p>

<!-- BEGIN notes -->
<section id="notes">
  <title>Notes</title>
  <list>
    <item><p>The <code>test</code> attribute without a namespace occurs on the
    <code xref="if_if">if:if</code> and <code xref="if_when">if:when</code>
    elements.</p></item>

    <item><p>The namespaced <code>if:test</code> attribute can occur on any
    block element or list item.</p></item>

    <item><p>The <code>test</code> and <code>if:test</code> attributes both
    take a test expression as content.</p></item>

    <item><p>A test expression is made up of one or more test clauses, separated
    by commas, and is true if any clause is true.</p></item>

    <item><p>A test clause is made up of one or more test tokens, separated by
    spaces, and is true if all tokens are true.</p></item>

    <item><p>Prefix any token with an exclamation point to negate it.</p></item>
  </list>
</section>
<!-- END notes -->


<!-- BEGIN examples -->
<section id="examples">
<title>Examples</title>
<p>The following examples show the <code>if:test</code> element used on standard
Mallard block elements. The same test expressions can be used with the
<code>test</code> attribute on the <code xref="if_if">if:if</code> and
<code xref="if_when">if:when</code> elements. See those pages for more examples.</p>

<p>Only output a paragraph when viewing on a mobile device:</p>

<example>
<code><![CDATA[
<p if:test="target:mobile">This is only output for mobile.</p>
]]></code>
</example>

<p>You can negate a token by prefixing it with an exclamation point. Output a
paragraph only when not viewing on a mobile device:</p>

<example>
<code><![CDATA[
<p if:test="!target:mobile">This is not output for mobile.</p>
]]></code>
</example>

<p>You can join multiple tokens with spaces to test that they are all true. Only
output a paragraph when the content is for running under GNOME 3 on a Linux-based
system:</p>

<example>
<code><![CDATA[
<p if:test="platform:gnome-shell platform:linux">This is for GNOME 3 on Linux.</p>
]]></code>
</example>

<p>You can join multiple clauses with commas to test that any clause is true.
Output a paragraph when the content is for either GNOME 3 or GNOME 2:</p>

<example>
<code><![CDATA[
<p if:test="platform:gnome-shell, platform:gnome-panel">This is for GNOME 2 or 3.</p>
]]></code>
</example>

<p>You can combine the matches for all tokens and any clause. There is no
grouping, so you must normalize the expression into an appropriate form.
Output a paragraph when the content is for either GNOME 3 or GNOME 2, and
it is only for Linux-based systems:</p>

<example>
<code><![CDATA[
<p if:test="
  platform:gnome-shell platform:linux, platform:gnome-panel platform:linux
">This is for GNOME on Linux.</p>
]]></code>
</example>

<p>You can mix negations into expressions. Negations always apply to tokens,
not to clauses or entire expressions. Output a paragraph when the content is
for either GNOME 3 or GNOME 2, but only for non-Linux-based systems:</p>

<example>
<code><![CDATA[
<p if:test="
  platform:gnome-shell !platform:linux, platform:gnome-panel !platform:linux
">This is for GNOME, but not on Linux.</p>
]]></code>
</example>

<p>You can also use the <code>if:test</code> attribute on list items for
<link xref="/1.0/mal_block_list"
href="http://projectmallard.org/1.0/mal_block_list.html">basic lists</link>,
<link xref="/1.0/mal_block_steps"
href="http://projectmallard.org/1.0/mal_block_steps.html">step lists</link>,
<link xref="/1.0/mal_block_terms"
href="http://projectmallard.org/1.0/mal_block_terms.html">term lists</link>,
and <link xref="/1.0/mal_block_tree"
href="http://projectmallard.org/1.0/mal_block_tree.html">tree lists</link>:</p>

<example>
<code><![CDATA[
<steps>
  <item if:test="platform:gnome-shell"><p>Click <gui>Activities</gui>.</p></item>
  <item if:test="platform:gnome-panel"><p>Click <gui>Applications</gui>.</p></item>
  <item><p>Under <gui>Games</gui>, open <gui>Five or More</gui>.</p></item>
</steps>
]]></code>

</example>

</section>
<!-- END examples -->


<!-- BEING processing -->
<section id="processing">
<title>Processing Expectations</title>

<p>When the <code>if:test</code> attribute occurs on a block element or list item,
that element is only shown if the test expression evaluates to true, as defined
below. Otherwise, the element is ignored, as if it were not in the document.</p>

<p>When the <code>test</code> attribute occurs on an
<code xref="if_if">if:if</code> or <code xref="if_when">if:when</code> element,
the test expression is evaluated to true or false as defined below, then the
processing rules for those elements are followed.</p>

<p>Processing tools evaluate test expressions according to the following rules:</p>

<list type="numbered">
<item><p>Split test expressions into test clauses on comma characters (U+002C).
Evaluate each test clause, ignoring empty or whitespace-only clauses. An
expression is true if any clause is true.</p></item>

<item><p>Split each test clause into test tokens on space characters (U+002A).
Evaluate each test token, ignoring empty tokens. A clause is true if all of
the tokens are true.</p></item>

<item><p>If a test token starts with an exclamation point (U+0021), remove the
leading exclamation and evaluate the remaining token, then negate that truth
value.</p></item>

<item><p>In most applications, a token evaluates to true only when it is
explicitly defined. Processing tools have a list of defined tokens. These
tokens may come from any combination of built-in lists, lists generated
based on computed values, and user-defined tokens. Some tokens may require
special handling. See <link xref="tokens"/> for details.</p></item>
</list>

<p>By default, tokens are false unless defined true. Some special-purpose
processing tools, however, may behave differently. A pre-processing filter
tool, for example, may have a list of false tokens and rewrite expressions
accordingly. Some processing tools may assign <em>maybe</em> values to some
tokens to defer certain conditionals to a target format.</p>
</section>
<!-- END processing -->


<?no-comparison?>


<!-- BEGIN schema -->
<section id="schema">
<title>Schema</title>

<p>The formal definition of the Mallard Conditionals extension
is maintained in <link href="http://www.relaxng.org/">RELAX NG</link>
<link href="http://www.relaxng.org/compact-20021121.html">Compact Syntax</link>
in code blocks within this specification. This is the formal definition
for the <code>test</code> and <code>if:test</code> attributes. The namespace
declarations for this definition are on the page <link xref="index"/>.</p>

<synopsis><code mime="application/relax-ng-compact-syntax">
if_attr_test = attribute test { text }
if_attr_if_test = attribute if:test { text }
<link xref="/1.0/mal_block" href="http://projectmallard.org/1.0/mal_block.html">mal_block_attr</link> &amp;= if_attr_if_test ?
<link xref="/1.0/mal_block_list" href="http://projectmallard.org/1.0/mal_block_list.html">mal_block_list_item_attr</link> &amp;= if_attr_if_test ?
<link xref="/1.0/mal_block_steps" href="http://projectmallard.org/1.0/mal_block_steps.html">mal_block_steps_item_attr</link> &amp;= if_attr_if_test ?
<link xref="/1.0/mal_block_terms" href="http://projectmallard.org/1.0/mal_block_terms.html">mal_block_terms_item_attr</link> &amp;= if_attr_if_test ?
<link xref="/1.0/mal_block_tree" href="http://projectmallard.org/1.0/mal_block_tree.html">mal_block_tree_item_attr</link> &amp;= if_attr_if_test ?
</code></synopsis>
</section>
<!-- END schema -->

</page>
